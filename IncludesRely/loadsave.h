/*
* Copyright (c) 2010, 武汉华中数控股份有限公司开发二部
* All rights reserved.
* 
* 文件名称：loadsave.h
* 文件标识：根据配置管理计划书
* 摘    要：本模块负责系统数据的加载和保存：
*           负责的系统数据包括：断点、寄存器等；
* 运行平台：Linux/WinXP
* 
* 版    本：1.01
* 作    者：刘涛
* 日    期：2010年8月26日
* 说    明：数据保存方式分为2种：0：无UPS；1：有UPS；
*/

#ifndef __LOAD_SAVE_H__
#define __LOAD_SAVE_H__

#include "hncdatatype.h"

///////////////////////////////////////////////////////////////////////////////
//
//    Bit16 sys_reg_load_file(void)
//
//    功能：
//            寄存器数据从文件加载
//
//    参数：
//
//    描述：
//            优先载入原文件，如果原文件损坏将载入备份文件
//	
//    返回：
//            0：成功；-1：原文件损坏，载入备份文件，需要进行数据检查；-2：载入失败
//
//////////////////////////////////////////////////////////////////////////
extern Bit16 sys_reg_load_file();

///////////////////////////////////////////////////////////////////////////////
//
//    Bit16 sys_reg_save_file(void)
//
//    功能：
//            寄存器数据保存至文件
//
//    参数：
//
//    描述：
//            保存B寄存器；
//
//    返回：
//            0：成功；-1：失败；
//
//////////////////////////////////////////////////////////////////////////
extern Bit16 sys_reg_save_file(void);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit16 sys_pos_load_file(void)
//
//    功能：
//            机床坐标：从文件加载
//
//    参数：
//
//    描述：
//            
//
//    返回：
//            0：成功；-1：失败；
//
//////////////////////////////////////////////////////////////////////////
extern Bit16 sys_pos_load_file(void);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit16 sys_pos_save_file(void)
//
//    功能：
//            机床坐标：保存至文件
//
//    参数：
//
//    描述：
//            断电保存
//
//    返回：
//            0：成功；-1：失败；
//
//////////////////////////////////////////////////////////////////////////
extern Bit16 sys_pos_save_file(void);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit16 sys_gcode_save_data(Bit16 ch)
//
//    功能：
//            G代码SAVE指令数据保存
//
//    参数：
//            ch ：通道号；
//
//    描述：
//            收到ncEvtGcodeSave事件时执行
//
//    返回：
//            0：成功；-1：通道号错误；-2：写文件失败；
//
//////////////////////////////////////////////////////////////////////////
extern Bit16 sys_gcode_save_data(Bit16 ch);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 sys_bp_check(Bit32 ch, Bit8 *bp_file)
//
//    功能：
//            检查BP文件的合法性
//
//    参数：
//            ch ：通道号；
//            bp_file ：BP完整路径文件名；
//
//    描述：
//            
//
//    返回：
//            0：成功；
//            -1：参数错；
//            -2：BP文件不存在或BP文件损坏；
//            -3：G代码文件不存在或者发生改动；
//            -4：工位或者参数不匹配；
//            -5：断点文件版本不匹配；
//			  -6：坐标数据发生变化；
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 sys_bp_check(Bit32 ch, Bit8 *bp_file);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 sys_bp_get_gcode(Bit8 *bp_file, Bit8 *gcode_file)
//
//    功能：
//            获取BP文件对应的G代码文件
//
//    参数：
//            bp_file ：BP完整路径文件名；
//            gcode_file ：G代码完整路径文件名；
//
//    描述：
//            调用者必须保证断点文件的正确性（即先调用bp_check）
//
//    返回：
//            0：成功；-1：失败；            
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 sys_bp_get_gcode(Bit8 *bp_file, Bit8 *gcode_file);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 sys_bp_load(Bit32 ch, Bit8 *bp_file)
//
//    功能：
//            断点加载
//
//    参数：
//            ch ：通道号；
//            bp_file ：BP完整路径文件名；
//
//    描述：
//            1) 调用者必须保证断点文件的正确性（即先调用bp_check）
//            2) load之后调用bp_try_resume
//
//    返回：
//            0：成功；-1：失败；
//            -2：断点G54.X坐标与系统现有G54.X坐标不一致，保留系统现有值；
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 sys_bp_load(Bit32 ch, Bit8 *bp_file);

///////////////////////////////////////////////////////////////////////////////
//
//    void sys_bp_try_resume(Bit32 ch)
//
//    功能：
//            断点恢复请求
//
//    参数：
//            wk ：工位数；
//
//    描述：
//            完成后发送ncEvtBpResumed事件；
//
//    返回：
//            
//
//////////////////////////////////////////////////////////////////////////
extern void sys_bp_try_resume(Bit32 ch);

///////////////////////////////////////////////////////////////////////////////
//
//    void sys_bp_try_save(Bit32 ch)
//
//    功能：
//            断点保存请求
//
//    参数：
//            ch ：通道号；
//
//    描述：
//            完成后发送ncEvtBpSaved事件；
//
//    返回：
//            
//
//////////////////////////////////////////////////////////////////////////
extern void sys_bp_try_save(Bit32 ch);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 sys_bp_save(Bit32 ch, Bit8 *bp_file)
//
//    功能：
//            断点保存
//
//    参数：
//            ch ：通道号；
//            bp_file ：BP完整路径文件名；
//
//    描述：
//            try_save完成后调用save；
//
//    返回：
//            0：成功；-1：失败；
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 sys_bp_save(Bit32 ch, Bit8 *bp_file);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit16 bp_data_init()
//
//    功能：
//            申请断点数据保存指针
//
//    参数：
//    描述：
//    返回：
//           1，申请成功；-1，申请失败
//      
//////////////////////////////////////////////////////////////////////////
extern Bit16 bp_data_init();

///////////////////////////////////////////////////////////////////////////////
//
//    void bp_data_exit()
//
//    功能：
//            释放断点数据保存指针
//
//    参数：
//    描述：
//    返回：
//      
//////////////////////////////////////////////////////////////////////////
extern void bp_data_exit();

///////////////////////////////////////////////////////////////////////////////
//
//    void bp_data_save(Bit32 ch)
//
//    功能：
//            断点数据保存
//
//    参数：
//            ch ：通道号；
//     
//
//    描述：
//            暂未处理一个工位配置多个通道的情况；
//            
//
//    返回：
//      
//
//////////////////////////////////////////////////////////////////////////
extern void bp_data_save(Bit32 ch);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 EncCntrLoad(void)
//
//    功能：
//            电机位置异常检测：加载电机位置
//
//    参数：
//
//    描述：
//            检测不到设备参数会导致判断错误，因此必须在总线初始化之后调用
//
//    返回：
//            0：成功；-1：失败；
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 EncCntrLoad(void);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 EncCntrSave(void)
//
//    功能：
//            电机位置异常检测：保存电机位置
//
//    参数：
//
//    描述：
//            断电时保存电机位置到文件，以供下次上电使用；
//            目前记录的是编码器1；
//
//    返回：
//            0：成功；-1：失败；
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 EncCntrSave(void);

//////////////////////////////////////////////////////////////////////////////
//
//    Bit32 EncCntrGetModifyFlag(Bit32 ax)
//
//    功能：
//            电机位置异常检测：获取[编码器反馈偏置量]修改标志
//
//    参数：
//            ax ：逻辑轴号；
//
//    描述：
//            
//
//    返回：
//            修改标志；0：未修改；1：修改；
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 EncCntrGetModifyFlag(Bit32 ax);

//////////////////////////////////////////////////////////////////////////////
//
//    Bit32 EncCntrSetModifyFlag(Bit32 ax, Bit32 flag)
//
//    功能：
//            电机位置异常检测：设置[编码器反馈偏置量]修改标志
//
//    参数：
//            ax ：逻辑轴号；
//            flag ：修改标志；
//
//    描述：
//            
//
//    返回：
//            0：成功；-1：失败；
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 EncCntrSetModifyFlag(Bit32 ax, Bit32 flag);

//////////////////////////////////////////////////////////////////////////////
//
//    void EncCntrModifyComfirm(void)
//
//    功能：
//            电机位置异常检测：[编码器反馈偏置量]改变确认
//
//    参数：
//            
//
//    描述：
//            确认[编码器反馈偏置量]已修改并保存，则清除报警；
//
//    返回：
//            
//
//////////////////////////////////////////////////////////////////////////
extern void EncCntrModifyComfirm(void);

//////////////////////////////////////////////////////////////////////////////
//
//    uBit32 EncCntrAlarmAxisMask(void)
//
//    功能：
//            电机位置异常检测：电机位置丢失的轴掩码
//
//    参数：
//            
//
//    描述：
//            
//
//    返回：
//            掩码
//
//////////////////////////////////////////////////////////////////////////
extern uBit32 EncCntrAlarmAxisMask(void);

///////////////////////////////////////////////////////////////////////////////
//
//    bool EncCntrCheckAlarm(Bit32 axis)
//
//    功能：
//            电机位置异常检测：是否有电机位置丢失报警
//
//    参数：
//            axis：逻辑轴号；
//
//    描述：
//            
//
//    返回：
//            true：是；false：否；
//
////////////////////////////////////////////////////////////////////////
extern bool EncCntrCheckAlarm(Bit32 axis);

//////////////////////////////////////////////////////////////////////////////
//
//    Bit32 EncCntrClearAlarm(Bit32 axis)
//
//    功能：
//            电机位置异常检测：清除报警
//
//    参数：
//            axis ：逻辑轴号；
//
//    描述：
//            
//
//    返回：
//            0：成功；-1：失败；
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 EncCntrClearAlarm(Bit32 axis);

//////////////////////////////////////////////////////////////////////////////
//
//    Bit32 EncCntrGetLastPos(Bit32 axis, Bit32 *pos)
//
//    功能：
//            电机位置异常检测：获取上次断电电机位置
//
//    参数：
//            axis ：轴号；
//            pos ：上次断电电机位置；
//
//    描述：
//            
//
//    返回：
//            0：成功；-1：失败；
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 EncCntrGetLastPos(Bit32 axis, Bit32 *pos);

//////////////////////////////////////////////////////////////////////////////
//
//    Bit32 EncCntrGetCurrentPos(Bit32 axis, Bit32 *pos)
//
//    功能：
//            电机位置异常检测：获取本次上电电机位置
//
//    参数：
//            axis ：轴号；
//            pos ：本次上电电机位置；
//
//    描述：
//            
//
//    返回：
//            0：成功；-1：失败；
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 EncCntrGetCurrentPos(Bit32 axis, Bit32 *pos);

#endif // __LOAD_SAVE_H__
