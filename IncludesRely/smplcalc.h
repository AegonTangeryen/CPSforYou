/*
* Copyright (c) 2011, 武汉华中数控股份有限公司开发二部
* All rights reserved.
* 
* 文件名称：smplcalc.h
* 文件标识：根据配置管理计划书
* 摘    要：采样算法头文件
* 运行平台：linux/winxp
* 
* 版    本：1.10.01
* 作    者：江哲夫
* 日    期：2012年11月17日
* 说    明：提供采样计算接口
*
*/

#ifndef _SMPL_CALC_H_
#define _SMPL_CALC_H_

#include "hncdatatype.h"

//复数
typedef struct _Compx
{
	fBit64 real;
	fBit64 imag;
}Compx;

//速度波动
typedef struct _Spdfluc
{
	fBit64 fluc;				//速度波动
	fBit64 perct;			//速度波动百分比
}Spdfluc;

//圆误差
typedef struct _CircleErr
{
	fBit64 cir_err;			//伺服不匹配度
	fBit64 bklashH;			//横轴反向跃冲
	fBit64 bklashV;			//纵轴反向跃冲
	Bit32 delayH;			//横轴延时时间
	Bit32 delayV;			//纵轴延时时间
	Bit32 ascendH;			//横轴加速时间
	Bit32 ascendV;			//纵轴加速时间
	Bit32 declineH;			//横轴减速时间
	Bit32 declineV;			//纵轴减速时间
}Cirerr;

/////////////////////////////////////////////////////////////////////////
//
//    fBit64 smpl_calc_compx_mag(compx &p)
//
//    功能：
//            复数取模
//
//    参数：
//			  p：待取模的复数
//
//    描述：
//            
//
//    返回：
//            p的模值
//
/////////////////////////////////////////////////////////////////////////
extern fBit64 smpl_calc_compx_mag(Compx &p);

/////////////////////////////////////////////////////////////////////////
//
//    Bit32 smpl_calc_fft_num(Bit32 num)
//
//    功能：
//            计算大于num的最小的2的整数次幂
//
//    参数：
//			  num：参与fft运算的点个数
//
//    描述：
//            
//
//    返回：
//            大于num的最小的2的整数次幂
//
/////////////////////////////////////////////////////////////////////////
extern Bit32 smpl_calc_fft_num(Bit32 num);

/////////////////////////////////////////////////////////////////////////
//
//    void smpl_calc_fft(compx *data, Bit32 pt_cnt)
//
//    功能：
//            fft快速傅里叶变换
//
//    参数：
//			  data  ：参与fft运算的复数数据区的头指针
//			  pt_cnt：参数fft运算的复数数据区点数
//
//    描述：
//            
//
//    返回：
//            无
//
/////////////////////////////////////////////////////////////////////////
extern void smpl_calc_fft(Compx *data, Bit32 pt_cnt);

////////////////////////////////////////////////////////////////////////////////////////
//
//    Bit32 smpl_calc_spd_fluc(Bit32 *cmd_spd, Bit32 *act_spd, Bit32 num, fBit64 coeff, Spdfluc &spdfluc)
//
//    功能：
//            计算指令速度恒速时，实际速度的速度波动
//
//    参数：
//			  cmd_spd：指令速度数据区头指针
//			  act_spd：实际速度数据区头指针
//			  num    ：数据区点数
//			  coeff  ：指令速度换算成实际速度的系数
//
//    描述：
//            
//
//    返回：
//            实际速度波动值
//
////////////////////////////////////////////////////////////////////////////////////////
extern Bit32 smpl_calc_spd_fluc(Bit32 *cmd_spd, Bit32 *act_spd, Bit32 num, fBit64 coeff, Spdfluc &spdfluc);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//    Bit32 smpl_calc_circle_err(Bit32 *posX, Bit32 *posY, Bit32 centX, Bit32 centY, Bit32 num, Bit32 rad, Cirerr &err)
//
//    功能：
//            计算圆误差的各项指标
//
//    参数：
//			  posX	：圆的横坐标数据区头指针
//			  posY	：圆的纵坐标数据区头指针
//			  centX ：圆心横坐标
//			  centY ：圆心纵坐标
//			  num   ：数据区点数
//			  rad   ：圆半径
//			  err   ：储存圆误差指标的结构体
//
//    描述：
//            计算伺服不匹配度、延时时间、加速时间、减速时间
//
//    返回：
//            -1：计算失败
//			   0：计算成功
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
extern Bit32 smpl_calc_circle_err(Bit32 *posX, Bit32 *posY, Bit32 centX, Bit32 centY, Bit32 num, Bit32 rad, Cirerr &err);

////////////////////////////////////////////////////////////////////////////////////////
//
//    fBit64 smpl_calc_2axis_tangent(fBit64 x, fBit64 x_pre, fBit64 y, fBit64 y_pre)
//
//    功能：
//            计算两轴合成速度
//
//    参数：
//			  x、y		  ：参与合成速度计算的两个轴的本次采样值
//			  x_pre、y_pre：参与合成速度计算的两个轴的上次采样值
//
//    描述：
//            
//
//    返回：
//            合成速度
//
////////////////////////////////////////////////////////////////////////////////////////
extern fBit64 smpl_calc_2axis_tangent(fBit64 x, fBit64 x_pre, fBit64 y, fBit64 y_pre);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//    fBit64 smpl_calc_3axis_tangent(fBit64 x, fBit64 x_pre, fBit64 y, fBit64 y_pre, fBit64 z, fBit64 z_pre)
//
//    功能：
//            计算三轴合成速度
//
//    参数：
//			  x、y、z		     ：参与合成速度计算的两个轴的本次采样值
//			  x_pre、y_pre、z_pre：参与合成速度计算的两个轴的上次采样值
//
//    描述：
//            
//
//    返回：
//            合成速度
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
extern fBit64 smpl_calc_3axis_tangent(fBit64 x, fBit64 x_pre, fBit64 y, fBit64 y_pre, fBit64 z, fBit64 z_pre);

////////////////////////////////////////////////////////////////////////////////////////
//
//    fBit64 smpl_calc_2axis_tangent(fBit64 x, fBit64 x_pre, fBit64 y, fBit64 y_pre)
//
//    功能：
//            计算一阶微分
//
//    参数：
//			  x、y、z		     ：参与一阶微分计算的两个轴的本次采样值
//			  x_pre、y_pre、z_pre：参与一阶微分计算的两个轴的上次采样值
//
//    描述：
//            
//
//    返回：
//            一阶微分值
//
////////////////////////////////////////////////////////////////////////////////////////
extern fBit64 smpl_calc_diff(fBit64 data, fBit64 data_pre);

////////////////////////////////////////////////////////////////////////////////////////
//
//    fBit64 smpl_calc_cpos(fBit64 data, fBit64 data_pre)
//
//    功能：
//            计算C轴位置
//
//    参数：
//			  data	  ：C轴位置本次采样值
//			  data_pre：C轴位置上次采样值
//
//    描述：
//            C轴位置是360度清零的，这里通过计算恢复成线性
//
//    返回：
//            进行线性恢复后的C轴位置
//
////////////////////////////////////////////////////////////////////////////////////////
extern fBit64 smpl_calc_cpos(fBit64 data, fBit64 data_pre);

////////////////////////////////////////////////////////////////////////////////////////
//
//    fBit64 smpl_calc_syn(fBit64 data1, fBit64 data2)
//
//    功能：
//            计算同步误差
//
//    参数：
//			  data1、data2：参与同步误差计算的值
//
//    描述：
//            
//
//    返回：
//            同步误差
//
////////////////////////////////////////////////////////////////////////////////////////
extern fBit64 smpl_calc_syn(fBit64 data1, fBit64 data2);

////////////////////////////////////////////////////////////////////////////////////////
//
//    fBit64 smpl_calc_dist_coef(Bit32 axis_no)
//
//    功能：
//            位置采样值换算成米或者度
//
//    参数：
//			  axis_no：逻辑轴号
//
//    描述：
//            
//
//    返回：
//            采样值换算成米度单位的换算系数，采样值 * 系数 = 米/度单位
//
////////////////////////////////////////////////////////////////////////////////////////
extern fBit64 smpl_calc_dist_coef(Bit32 axis_no);

////////////////////////////////////////////////////////////////////////////////////////
//
//    fBit64 smpl_calc_spd_coef(Bit32 axis_no, Bit32 spdType)
//
//    功能：
//            位置采样值换算成米/秒或者度/秒
//
//    参数：
//			  axis_no：逻辑轴号
//			  type   ：采样类型
//
//    描述：
//            
//
//    返回：
//            采样值换算成米度单位的换算系数，采样值 * 系数 = （米/度）/秒单位
//
////////////////////////////////////////////////////////////////////////////////////////
extern fBit64 smpl_calc_spd_coef(Bit32 axis_no, Bit32 spdType);

///////////////////////////////////////////////////////////////////////////
//
//    fBit64 smpl_calc_follow_err_coef(Bit32 axis_no)
//
//    功能：
//            跟踪误差采样值换算成毫米
//
//    参数：
//            axis_no ：轴逻辑号
//
//    描述：
//            
//
//    返回：
//            跟踪误差换算系数
//
//////////////////////////////////////////////////////////////////////////
extern fBit64 smpl_calc_follow_err_coef(Bit32 axis_no);

////////////////////////////////////////////////////////////////////////////////////////
//
//    fBit64 smpl_calc_current_coef(Bit16 ch_index)
//
//    功能：
//            位置采样值换算成毫安
//
//    参数：
//			  ch_index：采样通道号
//
//    描述：
//            
//
//    返回：
//            采样值换算成米度单位的换算系数，采样值 * 系数 = 毫安单位
//
////////////////////////////////////////////////////////////////////////////////////////
extern fBit64 smpl_calc_current_coef(Bit16 ch_index);

//extern fBit64 smpl_calc_filter(fBit64 data, fBit64 data_pre, Bit32 ch_index);
//extern fBit64 smpl_calc_user_convert(fBit64 val, Bit32 ch_index);
//extern fBit64 smpl_calc_coef(Bit16 ch_index);
//extern fBit64 smpl_calc_dist_to_mm(fBit64 val);
//extern fBit64 smpl_calc_dist_to_um(fBit64 val);
//extern fBit64 smpl_calc_spd_to_mmmin(fBit64 val);

#endif