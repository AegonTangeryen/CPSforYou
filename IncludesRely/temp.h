/*
* Copyright (c) 2013, 武汉华中数控股份有限公司
* All rights reserved.
* 
* 文件名称：temp.h
* 文件标识：根据配置管理计划书
* 摘    要：临时存放APP依赖的头文件
* 运行平台：Linux/Windows
* 
* 版    本：1.00
* 作    者：HNC-8 Team
* 日    期：2013年9月25日
* 说    明：from：hnccrds.h、hncevent.h、hnctool.h
*/

#ifndef __TEMP_H__
#define __TEMP_H__

#include "eventdef.h"

// from hnccrds.h
///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 hnc_get_chg_wcs_num(void)
//
//    功能：
//            获取工件坐标系临时数据区存储的坐标系个数
//
//    参数：
//
//    描述：
//            进给保持时修改的坐标零点数据存放在临时数据区
//
//    返回：
//            [0, MAX_CHG_WCS_NUM]：坐标系个数；
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 hnc_get_chg_wcs_num(void);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 hnc_set_chg_wcs_num(Bit32 num)
//
//    功能：
//            设置工件坐标系临时数据区存储的坐标系个数
//
//    参数：
//            num ：坐标系个数；[0, MAX_CHG_WCS_NUM];
//
//    描述：
//            
//
//    返回：
//            0：成功；-1：失败；
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 hnc_set_chg_wcs_num(Bit32 num);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 hnc_get_chg_wcs_chan(Bit32 ofs)
//
//    功能：
//            获取工件坐标系临时数据区指定位置存放的坐标系所属的通道号
//
//    参数：
//            ofs ：偏移；[0, MAX_CHG_WCS_NUM);
//
//    描述：
//            
//
//    返回：
//            [0, SYS_CHAN_NUM)：通道号；-1：失败；
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 hnc_get_chg_wcs_chan(Bit32 ofs);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 hnc_set_chg_wcs_chan(Bit32 ofs, Bit32 ch)
//
//    功能：
//            设置工件坐标系临时数据区指定位置存放的坐标系所属的通道号
//
//    参数：
//            ofs ：偏移；[0, MAX_CHG_WCS_NUM);
//            ch ：通道号；
//
//    描述：
//            
//
//    返回：
//            0：成功；-1：失败；
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 hnc_set_chg_wcs_chan(Bit32 ofs, Bit32 ch);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 hnc_get_chg_wcs(Bit32 ofs)
//
//    功能：
//            获取工件坐标系临时数据区指定位置存放的坐标系编号
//
//    参数：
//            ofs ：偏移；[0, MAX_CHG_WCS_NUM);
//
//    描述：
//            
//
//    返回：
//            [54, 60+G5EXT_WCS_NUM)：坐标系编号；-1：失败；
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 hnc_get_chg_wcs(Bit32 ofs);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 hnc_set_chg_wcs(Bit32 ofs, Bit32 crds)
//
//    功能：
//            获取工件坐标系临时数据区指定位置存放的坐标系编号
//
//    参数：
//            ofs ：偏移；[0, MAX_CHG_WCS_NUM);
//            crds ：坐标系编号；
//
//    描述：
//            
//
//    返回：
//            0：成功；-1：失败；
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 hnc_set_chg_wcs(Bit32 ofs, Bit32 crds);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit64 hnc_get_g5x_temp(Bit32 ofs, Bit32 ax)
//
//    功能：
//            获取工件坐标系临时数据区指定位置存放的坐标零点
//
//    参数：
//            ofs ：偏移；[0, MAX_CHG_WCS_NUM);
//            ax ：通道轴号；
//
//    描述：
//            进给保持时修改的坐标零点数据存放在临时数据区
//
//    返回：
//            单位：计算分辨率
//
//////////////////////////////////////////////////////////////////////////
extern Bit64 hnc_get_g5x_temp(Bit32 ofs, Bit32 ax);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 hnc_set_g5x_temp(Bit32 ofs, Bit32 ax, Bit64 zero)
//
//    功能：
//            设置工件坐标系临时数据区指定位置存放的坐标零点
//
//    参数：
//            ofs ：偏移；[0, MAX_CHG_WCS_NUM);
//            ax ：通道轴号；
//            zero ：零点；
//
//    描述：
//            
//
//    返回：
//            0：成功；-1：失败；
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 hnc_set_g5x_temp(Bit32 ofs, Bit32 ax, Bit64 zero);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 hnc_backup_chg_wcs(Bit32 ofs, Bit32 ch, Bit32 crds)
//
//    功能：
//            将指定坐标零点数据从数据区备份到临时数据区
//
//    参数：
//            ofs ：偏移；
//            ch ：通道号；
//            crds ：坐标系编号；
//
//    描述：
//            
//
//    返回：
//            0：成功；-1：失败；
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 hnc_backup_chg_wcs(Bit32 ofs, Bit32 ch, Bit32 crds);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 hnc_update_chg_wcs(Bit32 ofs, Bit32 ch, Bit32 crds)
//
//    功能：
//            将指定坐标零点数据从临时数据区更新到数据区
//
//    参数：
//            ofs ：偏移；
//            ch ：通道号；
//            crds ：坐标系编号；
//
//    描述：
//            
//
//    返回：
//            0：成功；-1：失败；
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 hnc_update_chg_wcs(Bit32 ofs, Bit32 ch, Bit32 crds);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 hnc_set_wt_chg(Bit32 ch)
//
//    功能：
//            设置坐标系修改标记
//
//    参数：
//            ch ：通道号；
//
//    描述：
//            进给保持中，以下3种情况需要请求NCU重新解释：
//            1) 修改坐标系；
//            2) 修改刀具；
//            3) 修改（运行行, 解释行]之间的G代码；
//
//    返回：
//            0：成功；-1：失败；
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 hnc_set_wt_chg(Bit32 ch);

// from hncevent.h
///////////////////////////////////////////////////////////////////////////////
//
//    void HNC_EventSetFun(Bit32 (*fun)(SEventElement ev))
//
//    功能：
//            设置事件的功能函数
//
//    参数：
//            fun ：事件的功能接口函数
//
//    描述：
//			  在HNC_EventGet接口中调用本功能函数
//
//    返回：
//            
//
//////////////////////////////////////////////////////////////////////////
extern void HNC_EventSetFun(Bit32 (*fun)(SEventElement ev));

// from hnctool.h

//	选刀策略方法
enum TOOL_SEL_WAY
{
	TOOL_NEAR = 0,	//	刀库就近选刀
	TOOL_FOW_DIR,	//	刀库正转选刀
	TOOL_BAK_DIR,	//	刀库反转选刀
	TOOL_RIGID		//	刀库固定刀位选刀
};
#define TOOL_TYPE_MAX_NUM (47)

//////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_ToolTypeToName(Bit32 toolType, Bit8 *toolName)
//
//    功能：
//            由刀具类型获取刀具名字
//
//    参数：
//			  toolType		刀具类型
//			  toolName		刀具名字
//
//    描述：
//
//    返回：
//            0		成功
//			  -1	失败
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 HNC_ToolTypeToName(Bit32 toolType, Bit8 *toolName);

//////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_ToolGetToolName(Bit32 toolNo, Bit8 *toolName)
//
//    功能：
//            取刀具名字
//
//    参数：
//			 toolNo		通道内的刀具号
//			 toolName	返回的刀具名字
//
//    描述：
//            
//
//    返回：
//            0		成功
//			  -1	失败
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 HNC_ToolGetToolName(Bit32 toolNo, Bit8 *toolName);

//////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_ToolSetGroup(Bit32 chn, Bit32 groupNo, Bit32 index, Bit32 toolNo)
//
//    功能：
//            设置刀具分组
//
//    参数：
//			 chn		通道号
//			 groupNo	组号
//			 index		组内索引号
//			 toolNo		刀具号
//
//    描述：
//            
//
//    返回：
//            0		成功
//			  -1	失败
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 HNC_ToolSetGroup(Bit32 chn, Bit32 groupNo, Bit32 index, Bit32 toolNo);

//////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_ToolGetGroup(Bit32 chn, Bit32 groupNo, Bit32 index, Bit32 *toolNo)
//
//    功能：
//            获取刀具分组
//
//    参数：
//			 chn		通道号
//			 groupNo	组号
//			 index		组内索引号
//			 toolNo		刀具号
//
//    描述：
//            
//
//    返回：
//            0		成功
//			  -1	失败
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 HNC_ToolGetGroup(Bit32 chn, Bit32 groupNo, Bit32 index, Bit32 *toolNo);

//////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_ToolFindTool(Bit32 magNo, Bit32 curPot, Bit32 selWay , Bit32 rigidPot, Bit32 toolNo, Bit32 *dir, Bit32 *step)
//
//    功能：
//            从刀库表中查找刀具
//
//    参数：
//			 magNo		刀库号
//			 curPot		当前刀位号
//			 selWay		选刀策略
//			 rigidPot	固定刀位选刀时的目标固定刀位号
//			 toolNo		查找的目的刀具号
//			 dir		返回的旋转方向
//			 step	    返回的旋转步数
//
//    描述：
//            
//
//    返回：
//            0		查找到刀具
//			  -1	没有查找到刀具
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 HNC_ToolFindTool(Bit32 magNo, Bit32 curPot, Bit32 selWay , Bit32 rigidPot, Bit32 toolNo, Bit32 *dir, Bit32 *step);

//////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_ToolFindBlankPotForTool(Bit32 magNo, Bit32 curPot, Bit32 selWay, Bit32 rigidPot, Bit32 toolNo, Bit32 *dir, Bit32 *step)
//
//    功能：
//            从刀库表中查找适合刀具存放的空刀位
//
//    参数：
//			 magNo		刀库号
//			 curPot		当前刀位号
//			 selWay		选刀策略
//			 rigidPot	固定刀位选刀时的目标固定刀位号
//			 toolNo		空刀位可以放的刀具号
//			 dir		返回的旋转方向
//			 step	    返回的旋转步数
//
//    描述：
//
//    返回：
//            0		找到该刀位
//			  -1	没有找到该刀位
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 HNC_ToolFindBlankPotForTool(Bit32 magNo, Bit32 curPot, Bit32 selWay, Bit32 rigidPot, Bit32 toolNo, Bit32 *dir, Bit32 *step);

//////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_ToolLifeGetFlag(Bit32 chn, Bit8 *flag)
//
//    功能：
//            查询刀具寿命功能是否开启
//
//    参数：
//			  chn			通道号
//			  flag			返回刀具寿命开启标志位(1：开启；0：关闭)
//
//    描述：
//
//    返回：
//            0		成功
//			  -1	失败
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 HNC_ToolLifeGetFlag(Bit32 chn, Bit8 *flag);

//////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_ToolLifeGetLifeState(Bit32 toolNo, Bit8 *state)
//
//    功能：
//            查询刀具寿命状态
//
//    参数：
//			  toolNo		刀具号
//			  state			返回的刀具寿命状态
//
//    描述：
//
//    返回：
//            0		成功
//			  -1	失败
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 HNC_ToolLifeGetLifeState(Bit32 toolNo, Bit8 *state);

//////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_ToolLifeTimeAdd(Bit32 toolNo)
//
//    功能：
//            刀具的寿命时间计时加1(单位：分钟)
//
//    参数：
//			  toolNo		刀具号
//
//    描述：
//
//    返回：
//            0		成功
//			  -1	失败
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 HNC_ToolLifeTimeAdd(Bit32 toolNo);

//////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_ToolLifeCountAdd(Bit32 toolNo)
//
//    功能：
//            设置刀具寿命计数加1
//
//    参数：
//			  toolNo		刀具号
//
//    描述：
//
//    返回：
//            0		成功
//			  -1	失败
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 HNC_ToolLifeCountAdd(Bit32 toolNo);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_ToolGetTmpToolNum(void)
//
//    功能：
//            获取刀具临时数据区存储的刀具数
//
//    参数：
//
//    描述：
//            进给保持时修改的刀具数据存放在临时数据区
//
//    返回：
//            [0, MAX_CHG_TOOL]：刀具数；
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 HNC_ToolGetTmpToolNum(void);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_ToolSetTmpToolNum(Bit32 toolNum)
//
//    功能：
//            设置刀具临时数据区存储的刀具数
//
//    参数：
//            num ：刀具数；[0, MAX_CHG_TOOL]；
//
//    描述：
//            
//
//    返回：
//            0：成功；-1：失败；
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 HNC_ToolSetTmpToolNum(Bit32 toolNum);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_ToolGetTmpToolNo(Bit32 ofs)
//
//    功能：
//            获取刀具临时数据区指定位置存放的刀具号
//
//    参数：
//            ofs ：偏移；[0, MAX_CHG_TOOL)；
//
//    描述：
//            进给保持时修改的刀具数据存放在临时数据区
//
//    返回：
//            [1, MAX_TOOL_NUM)：刀具号；0：未存放数据；
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 HNC_ToolGetTmpToolNo(Bit32 ofs);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_ToolSetTmpToolNo(Bit32 ofs, Bit32 toolNo)
//
//    功能：
//            设置刀具临时数据区指定位置存放的刀具号
//
//    参数：
//            ofs ：偏移；[0, MAX_CHG_TOOL)；
//            t ：刀具号；
//
//    描述：
//            
//
//    返回：
//            0：成功；-1：失败；
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 HNC_ToolSetTmpToolNo(Bit32 ofs, Bit32 toolNo);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_ToolBackupTmpTool(Bit32 ofs, Bit32 toolNo)
//
//    功能：
//            将指定刀具的数据从数据区备份到临时数据区
//
//    参数：
//            ofs ：偏移；[0, MAX_CHG_TOOL)；
//            t ：刀具号；
//
//    描述：
//            
//
//    返回：
//            0：成功；-1：失败；
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 HNC_ToolBackupTmpTool(Bit32 ofs, Bit32 toolNo);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_ToolUpdateTmpTool(Bit32 ofs, Bit32 toolNo)
//
//    功能：
//            将指定刀具的数据从临时数据区更新到数据区
//
//    参数：
//            ofs ：偏移；[0, MAX_CHG_TOOL)；
//            t ：刀具号；
//
//    描述：
//            
//
//    返回：
//            0：成功；-1：失败；
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 HNC_ToolUpdateTmpTool(Bit32 ofs, Bit32 toolNo);

//from hncsys.h
///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_SysSnSet(Bit8 *buf)
//
//    功能：
//            设置SN码
//
//    参数：
//
//			buf 将设置的SN码写入文件
//    描述：
//            无描述
//
//    返回：
//            无返回
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 HNC_SysSnSet(Bit8 *buf);


//	获取关键参数修改标记
extern Bit32 paraman_get_pivotalParmChgFlag(Bit32 *flag);

//	设置关键参数修改标记
extern Bit32 paraman_set_pivotalParmChgFlag(Bit32 flag[]);

#endif // __TEMP_H__
