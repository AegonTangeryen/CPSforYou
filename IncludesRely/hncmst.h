/*
* Copyright (c) 2010, 武汉华中数控股份有限公司开发二部
* All rights reserved.
* 
* 文件名称：hncmst.h
* 文件标识：任意行mst恢复
* 摘    要：
* 运行平台：
* 
* 版    本：1.03.00
* 作    者：lijian
* 日    期：2014年11月12日
* 说    明：          
*/
#include "eventdef.h"

////////////////////////////////////////////////////////////////////////
//
//	  Bit32 Hnc_MstAddToInfo(SEventElement ev,Bit32 ch)
//
//    功能：
//					将事件添加到队列（界面调用）
//
//    参数：
//					SEventElement ev：事件
//                  Bit32 ch: 通道
//                 
//
//    描述：
//                 
//                  
//
//	  返回：
//                  
//
////////////////////////////////////////////////////////////////////////
extern Bit32 Hnc_MstAddToInfo(SEventElement ev,Bit32 ch);

////////////////////////////////////////////////////////////////////////
//
//	  Bit32 Hnc_MstInfoToTxt(Bit32 ch,Bit8 *txtMem)
//
//    功能：
//					将事件添加到队列（界面调用）
//
//    参数：
//					
//                  Bit32 ch: 通道
//                 
//
//    描述：
//                 
//                  
//
//	  返回：
//                  
//
////////////////////////////////////////////////////////////////////////
extern Bit32 Hnc_MstInfoToTxt(Bit32 ch);

////////////////////////////////////////////////////////////////////////
//
//	  Bit32 Hnc_MstChClear(void)
//
//    功能：
//					MST模块清空，清空 队列
//
//    参数：
//					
//                  
//                 
//
//    描述：
//                 
//                  
//
//	  返回：
//                  
//
////////////////////////////////////////////////////////////////////////
extern Bit32 Hnc_MstChClear(Bit32 ch);

////////////////////////////////////////////////////////////////////////
//
//	  Bit32 Hnc_MstInit(Bit32 ch,Bit8 *p)
//
//    功能：
//					MST初始化
//
//    参数：
//					
//               bit8 *p:程序管理器中的一个子程序空间    
//                 
//
//    描述：
//            由程序管理器调用     
//                  
//
//	  返回：
//                  
//
////////////////////////////////////////////////////////////////////////
extern Bit32 Hnc_MstInit(Bit32 ch,Bit8 *p);

////////////////////////////////////////////////////////////////////////
//
//	  Bit32 Hnc_MstInit(void)
//
//    功能：
//					MST退出
//
//    参数：
//					
//                 
//                 
//
//    描述：
//            由程序管理器调用 （先释放mst内存，释放内存后必须调用）    
//                  
//
//	  返回：0：成功
//                  
//
////////////////////////////////////////////////////////////////////////
extern Bit32 Hnc_MstExit(void);

////////////////////////////////////////////////////////////////////////
//
//	  Bit32 Hnc_MstInputConfirm(Bit32 ch, Bit8 *buf, Bit32 size)
//
//    功能：
//					mst手动输入
//
//    参数：
//					
//                 
//                 
//
//    描述：
//                
//                  
//
//	  返回：0：成功
//                  
//
////////////////////////////////////////////////////////////////////////
extern Bit32 Hnc_MstInputConfirm(Bit32 ch, Bit8 *buf, Bit32 size);

////////////////////////////////////////////////////////////////////////
//
//	  Bit32 Hnc_MstMGroupFilter(Bit32 ch)
//
//    功能：
//					mst过滤
//
//    参数：
//					
//                 
//                 
//
//    描述：
//                
//                  
//
//	  返回：0：成功
//                  
//
////////////////////////////////////////////////////////////////////////
extern Bit32 Hnc_MstMGroupFilter(Bit32 ch);

////////////////////////////////////////////////////////////////////////
//
//	  Bit32 Hnc_MstGetModal(Bit16 *s,Bit16 *t,Bit16 *m)
//
//    功能：
//					获取扫描得到的m/s/t值
//
//    参数：
//					
//                 
//                 
//
//    描述：
//                
//                  
//
//	  返回：0：成功
//                  
//
////////////////////////////////////////////////////////////////////////
extern Bit32 Hnc_MstGetModal(Bit16 *s, Bit16 *t, Bit16 *m, Bit32 ch);

////////////////////////////////////////////////////////////////////////
//
//	  Bit32 Hnc_MstGetModal(Bit16 *s,Bit16 *t,Bit16 *m)
//
//    功能：
//					非扫描设置指定行的轴位置值
//
//    参数：
//					
//                 
//                 
//
//    描述：
//                
//                  
//
//	  返回：
//                  
//
////////////////////////////////////////////////////////////////////////
extern void Hnc_MstSetPos(fBit64 pos, Bit16 i, Bit32 ch);

////////////////////////////////////////////////////////////////////////
//
//	  Bit32 Hnc_MstGetModal(Bit16 *s,Bit16 *t,Bit16 *m)
//
//    功能：
//					非扫描取指定行的轴位置值
//
//    参数：
//					
//                 
//                 
//
//    描述：
//                
//                  
//
//	  返回：
//                  
//
////////////////////////////////////////////////////////////////////////
extern void Hnc_MstGetPos(Bit64 pos[CHAN_AXES_NUM], Bit32 ch);

////////////////////////////////////////////////////////////////////////
//
//	  Bit32 Hnc_AxisPosSet(Bit32 ch)
//
//    功能：
//					设置坐标系值
//
//    参数：
//					
//                 
//                 
//
//    描述：
//                
//                  
//
//	  返回：
//                  
//
////////////////////////////////////////////////////////////////////////
extern Bit32 Hnc_AxisPosSet(Bit32 ch);

////////////////////////////////////////////////////////////////////////
//
//	  Bit32 Hnc_AxisPosSet(Bit32 ch)
//
//    功能：
//					获取任意行指定行数
//
//    参数：
//					
//                 
//                 
//
//    描述：
//                
//                  
//
//	  返回：
//                  
//
////////////////////////////////////////////////////////////////////////
extern Bit32 Hnc_MstGetRow(Bit32 ch);

////////////////////////////////////////////////////////////////////////
//
//	  Bit32 Hnc_MstGetRandomState(Bit32 ch);
//
//    功能：
//					获取任意行状态
//
//    参数：ch :通道
//					
//                 
//                 
//
//    描述：
//                
//                  
//
//	  返回：>0:任意行状态  <0 :失败
//                  
//
////////////////////////////////////////////////////////////////////////
extern Bit32 Hnc_MstGetRandomState(Bit32 ch);
